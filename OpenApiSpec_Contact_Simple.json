{
    "openapi": "3.0.1",
    "info": {
        "title": "Lightning Platform REST API",
        "description": "REST API provides you with programmatic access to your data in Salesforce. The flexibility and scalability of REST API make it an excellent choice for integrating Salesforce into your applications and for performing complex operations on a large scale. You can use REST API tools to create, manipulate, and search data in Salesforce by sending HTTP requests to endpoints in Salesforce. Depending on where you send requests, you access and operate on different pieces of information, called resources. Resources include records, query results, metadata, and more. ",
        "version": "56.0"
    },
    "servers": [
        {
            "url": "https://d5i000004p3mreas-dev-ed.my.salesforce.com/services/data/v56.0"
        }
    ],
    "security": [
        {
            "bearerAuth": []
        },
        {
            "oAuth2": []
        },
        {
            "openIDConnectDiscovery": []
        }
    ],
    "paths": {                
        "/sobjects/Contact/{id}": {
            "description": "Accesses records based on the specified object ID. Retrieves, updates, or deletes records. This resource can also be used to retrieve field values. Use the GET method to retrieve records or fields, the DELETE method to delete records, and the PATCH method to update records.",
            "get": {
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The identifier of the object. For example, 001R0000005hDFYIA2. A required path parameter for all methods (GET, PATCH, and DELETE).",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "A comma-delimited list of fields to get values for. For example, ?fields=name,description,numberofemployees,industry. An optional query parameter that can only be used with GET.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "If-Modified-Since",
                        "in": "header",
                        "description": "An optional header specifying a date and time. The request returns records that have been modified after that date and time. The format is EEE, dd MMM yyyy HH:mm:ss z For example: If-Modified-Since: Mon, 30 Nov 2020 08:34:54 MST.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "If-Unmodified-Since",
                        "in": "header",
                        "description": "An optional header specifying a date and time. The request returns records that have not been modified after that date and time. The format is EEE, dd MMM yyyy HH:mm:ss z For example: If-Unmodified-Since: Mon, 30 Nov 2020 08:34:54 MST.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "304": {
                        "description": "Status Code 304",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RestApiError"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Status Code 400",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ErrorInfo"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Status Code 401",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ErrorInfo"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Status Code 403",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RestApiError"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Status Code 404",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RestApiError"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Status Code 500",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ErrorInfo"
                                    }
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Status Code 405",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RestApiError"
                                    }
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Status Code 503",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RestApiError"
                                    }
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Status Code 200",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContactSObject"
                                }
                            }
                        }
                    },
                    "412": {
                        "description": "Status Code 412",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RestApiError"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }        
    },
    "components": {
        "schemas": {            
            "ContactSObject": {
                "type": "object",
                "properties": {
                    "Id": {
                        "type": "string"
                    },
                    "IsDeleted": {
                        "type": "boolean",
                        "description": "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted."
                    },
                    "MasterRecordId": {
                        "type": "string",
                        "description": "If this record was deleted as the result of a merge, this field contains the ID of the record that remains. If this record was deleted for any other reason, or has not been deleted, the value is null."
                    },
                    "AccountId": {
                        "type": "string",
                        "description": "ID of the account thatâ€™s the parent of this contact. We recommend that you update up to 50 contacts simultaneously when changing the accounts on contacts enabled for a Customer Portal or partner portal. We also recommend that you make this update after business hours."
                    },
                    "IsPersonAccount": {
                        "type": "boolean",
                        "description": "Read only. Indicates whether this account has a record type of Person Account (true) or not (false). Label is Is Person Account."
                    },
                    "LastName": {
                        "type": "string",
                        "description": "Required. Last name of the contact up to 80 characters."
                    },
                    "FirstName": {
                        "type": "string",
                        "description": "The contactâ€™s first name up to 40 characters."
                    },
                    "Salutation": {
                        "type": "string",
                        "description": "Honorific abbreviation, word, or phrase to be used in front of name in greetings, such as Dr. or Mrs."
                    },
                    "Name": {
                        "type": "string",
                        "description": "Concatenation of FirstName, MiddleName, LastName, and Suffix up to 203 characters, including whitespaces."
                    },
                    "OtherStreet": {
                        "type": "string",
                        "description": "Street for alternate address."
                    },
                    "OtherCity": {
                        "type": "string",
                        "description": "Alternate address details."
                    },
                    "OtherState": {
                        "type": "string",
                        "description": "Alternate address details."
                    },
                    "OtherPostalCode": {
                        "type": "string",
                        "description": "Alternate address details."
                    },
                    "OtherCountry": {
                        "type": "string",
                        "description": "Alternate address details."
                    },
                    "OtherLatitude": {
                        "type": "number",
                        "description": "Used with OtherLongitude to specify the precise geolocation of an alternate address. Acceptable values are numbers between â€“90 and 90 up to 15 decimal places. For details on geolocation compound fields, see ."
                    },
                    "OtherLongitude": {
                        "type": "number",
                        "description": "Used with OtherLatitude to specify the precise geolocation of an alternate address. Acceptable values are numbers between â€“180 and 180 up to 15 decimal places. For details on geolocation compound fields, see ."
                    },
                    "OtherGeocodeAccuracy": {
                        "type": "string",
                        "description": "Accuracy level of the geocode for the other address. For details on geolocation compound fields, see ."
                    },
                    "OtherAddress": {
                        "type": "object",
                        "description": "The compound form of the other address. Read-only. For details on compound address fields, see Address Compound Fields."
                    },
                    "MailingStreet": {
                        "type": "string",
                        "description": "Street address for mailing address."
                    },
                    "MailingCity": {
                        "type": "string",
                        "description": "Mailing address details."
                    },
                    "MailingState": {
                        "type": "string",
                        "description": "Mailing address details."
                    },
                    "MailingPostalCode": {
                        "type": "string",
                        "description": "Mailing address details."
                    },
                    "MailingCountry": {
                        "type": "string",
                        "description": "Mailing address details."
                    },
                    "MailingLatitude": {
                        "type": "number",
                        "description": "Used with MailingLongitude to specify the precise geolocation of a mailing address. Acceptable values are numbers between â€“90 and 90 up to 15 decimal places. For details on geolocation compound fields, see ."
                    },
                    "MailingLongitude": {
                        "type": "number",
                        "description": "Used with MailingLatitude to specify the precise geolocation of a mailing address. Acceptable values are numbers between â€“180 and 180 up to 15 decimal places. For details on geolocation compound fields, see ."
                    },
                    "MailingGeocodeAccuracy": {
                        "type": "string",
                        "description": "Accuracy level of the geocode for the mailing address. For details on geolocation compound field, see ."
                    },
                    "MailingAddress": {
                        "type": "object",
                        "description": "The compound form of the mailing address. Read-only. For details on compound address fields, see Address Compound Fields."
                    },
                    "Phone": {
                        "type": "string",
                        "description": "Telephone number for the contact. Label is Business Phone."
                    },
                    "Fax": {
                        "type": "string",
                        "description": "The contactâ€™s fax number. Label is Business Fax."
                    },
                    "MobilePhone": {
                        "type": "string",
                        "description": "Contactâ€™s mobile phone number."
                    },
                    "HomePhone": {
                        "type": "string",
                        "description": "The contactâ€™s home telephone number."
                    },
                    "OtherPhone": {
                        "type": "string",
                        "description": "Telephone for alternate address."
                    },
                    "AssistantPhone": {
                        "type": "string",
                        "description": "The assistantâ€™s telephone number."
                    },
                    "ReportsToId": {
                        "type": "string",
                        "description": "This field doesnâ€™t appear if IsPersonAccount is true."
                    },
                    "Email": {
                        "type": "string",
                        "description": "The contactâ€™s email address."
                    },
                    "Title": {
                        "type": "string",
                        "description": "Title of the contact, such as CEO or Vice President."
                    },
                    "Department": {
                        "type": "string",
                        "description": "The contactâ€™s department."
                    },
                    "AssistantName": {
                        "type": "string",
                        "description": "The assistantâ€™s name."
                    },
                    "LeadSource": {
                        "type": "string",
                        "description": "The leadâ€™s source."
                    },
                    "Birthdate": {
                        "type": "string",
                        "description": "The contactâ€™s birthdate. Filter criteria for report filters, list view filters, and SOQL queries ignore the year portion of the Birthdate field. For example, this SOQL query returns contacts with birthdays later in the year than today:SELECT Name, Birthdate FROM Contact WHERE Birthdate > TODAY",
                        "format": "date"
                    },
                    "Description": {
                        "type": "string",
                        "description": "A description of the contact. Label is Contact Description up to 32 KB."
                    },
                    "OwnerId": {
                        "type": "string",
                        "description": "The ID of the owner of the account associated with this contact."
                    },
                    "CreatedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "CreatedById": {
                        "type": "string"
                    },
                    "LastModifiedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "LastModifiedById": {
                        "type": "string"
                    },
                    "SystemModstamp": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "LastActivityDate": {
                        "type": "string",
                        "description": "Value is the most recent of either: Due date of the most recent event logged against the record. Due date of the most recently closed task associated with the record.",
                        "format": "date"
                    },
                    "LastCURequestDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "LastCUUpdateDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "LastViewedDate": {
                        "type": "string",
                        "description": "The timestamp when the current user last viewed this record or list view. If this value is null, the user might have only accessed this record or list view (LastReferencedDate) but not viewed it.",
                        "format": "date-time"
                    },
                    "LastReferencedDate": {
                        "type": "string",
                        "description": "The timestamp when the current user last accessed this record, a record related to this record, or a list view.",
                        "format": "date-time"
                    },
                    "EmailBouncedReason": {
                        "type": "string",
                        "description": "If bounce management is activated and an email sent to the contact bounces, the reason for the bounce."
                    },
                    "EmailBouncedDate": {
                        "type": "string",
                        "description": "If bounce management is activated and an email sent to the contact bounces, the date and time of the bounce.",
                        "format": "date-time"
                    },
                    "IsEmailBounced": {
                        "type": "boolean",
                        "description": "If bounce management is activated and an email is sent to a contact, indicates whether the email bounced (true) or not (false)."
                    },
                    "PhotoUrl": {
                        "type": "string",
                        "description": "Path to be combined with the URL of a Salesforce instance (Example: https://yourInstance.salesforce.com/) to generate a URL to request the social network profile image associated with the contact. Generated URL returns an HTTP redirect (code 302) to the social network profile image for the contact. Empty if Social Accounts and Contacts isn't enabled or if Social Accounts and Contacts is disabled for the requesting user."
                    },
                    "Jigsaw": {
                        "type": "string",
                        "description": "References the companyâ€™s ID in Data.com. If an account has a value in this field, it means that the account was imported from Data.com. If the field value is null, the account was not imported from Data.com. Maximum size is 20 characters. Available in API version 22.0 and later. Label is Data.com Key.The Jigsaw field is exposed in the API to support troubleshooting for import errors and reimporting of corrected data. Do not modify this value."
                    },
                    "JigsawContactId": {
                        "type": "string"
                    },
                    "CleanStatus": {
                        "type": "string",
                        "description": "Indicates the recordâ€™s clean status as compared with Data.com. Values include: Matched, Different, Acknowledged, NotFound, Inactive, Pending, SelectMatch, or Skipped. Several values for CleanStatus appear with different labels on the contact record. Matched appears as In Sync Acknowledged appears as Reviewed Pending appears as Not Compared"
                    },
                    "IndividualId": {
                        "type": "string",
                        "description": "ID of the data privacy record associated with this contact. This field is available if Data Protection and Privacy is enabled."
                    },
                    "Level__c": {
                        "type": "string"
                    },
                    "Languages__c": {
                        "type": "string"
                    },
                    "Level_Image__c": {
                        "type": "string"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "url": {
                                "type": "string"
                            }
                        }
                    }
                },
                "description": "Represents a contact, which is a person associated with an account."
            },
            "RestApiError": {
                "type": "object",
                "properties": {
                    "errorCode": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            },
            "ErrorInfo": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string"
                    },
                    "errorCode": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "extendedErrorDetails": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "extendedErrorCode": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}